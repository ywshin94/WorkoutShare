// ImageRender.swift ‚Äî UIImage snapshot Î∞õÎäî Íµ¨Ï°∞Î°ú ÏàòÏ†ï

import SwiftUI
import UIKit

extension View {
    // snapshot Ìï®Ïàò: ÌòÑÏû¨ ViewÎ•º UIImageÎ°ú Î†åÎçîÎßÅ (Î∑∞Í∞Ä Ïã§Ï†ú ÌëúÏãúÎêú ÏÉÅÌÉúÏó¨Ïïº Ìï®)
    func snapshot(aspectRatio: CGFloat = 1.0) -> UIImage? {
        let screenWidth = UIScreen.main.bounds.width
        let canvasWidth = min(screenWidth - 40, 350)
        let canvasHeight = canvasWidth / aspectRatio
        let targetSize = CGSize(width: canvasWidth, height: canvasHeight)

        let rootView = self
            .frame(width: canvasWidth, height: canvasHeight)
            .ignoresSafeArea()

        let controller = UIHostingController(rootView: rootView)
        let view = controller.view!

        view.frame = CGRect(origin: .zero, size: targetSize)
        view.backgroundColor = .clear

        // ‚úÖ Í∞ïÏ†ú layout ÏßÑÌñâ
        let window = UIWindow(frame: view.bounds)
        window.rootViewController = controller
        window.windowLevel = .normal
        window.isHidden = false

        // üîÅ Í∞ïÏ†úÎ°ú layout cycle ÎèåÎ¶º
        RunLoop.main.run(until: Date(timeIntervalSinceNow: 0.05))

        let format = UIGraphicsImageRendererFormat()
        format.scale = UIScreen.main.scale
        format.opaque = false

        let renderer = UIGraphicsImageRenderer(size: targetSize, format: format)
        return renderer.image { context in
            view.drawHierarchy(in: view.bounds, afterScreenUpdates: true)
        }
    }
}
